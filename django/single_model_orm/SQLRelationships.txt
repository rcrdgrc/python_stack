To indicate a one-to-many relationship between models, Django uses a special field, ForeignKey. 
Consider these models, where one author can write many books and one book can be written by only one author:

class Author(models.Model):
    name = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
class Book(models.Model):
    title = models.CharField(max_length=255)
    author = models.ForeignKey(Author, related_name="books", on_delete = models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

Notice that rather than having a simple integer field as our foreign key, the Book model 
has this line: models.ForeignKey(Author, related_name="books", on_delete = models.CASCADE). 
While the CRUD operations are fundamentally the same, let's take a look at how we create and 
read when we have a relationship between two models.

CREATING
Remember that by default, all fields are required. The created_at and updated_at fields will be populated 
automatically, but the other two fields must be set upon creation. Since title is a CharField, 
we can pass it a string; but the author field is expecting an instance of the Author class.
 So to create a record that has this foreign key relationship, we first need to have an instance 
 of an Author, and then we can pass it like we have any other field:

this_author = Author.objects.get(id=2)	# get an instance of an Author
my_book = Book.objects.create(title="Little Women", author=this_author)	# set the retrieved author as the author of a new book
    
# or in one line...
my_book = Book.objects.create(title="Little Women", author=Author.objects.get(id=2))
READING
Now say we are trying to view books with their associated authors. Joins in Django happen
 automatically. If you have a book object, you don't need to run any additional query 
 to get information about the author. If we retrieve an instance of a book:

some_book = Book.objects.get(id=5)
Just like we are able to view the book's title, we can also view the book's author:

some_book.title		# returns a string that is the title of the book
some_book.author	# returns the Author instance associated with this book
Because some_book.author is an instance of the Author class, we can now access the author's fields, like so:

some_book.author.name		# return the name of the author of this book
some_book.author.id		# returns the id of the author of this book
Just as we are able to filter by other fields, we can also search based off of a ForeignKey 
relationship. This code will find all of the books by the author with ID 2:

this_author = Author.objects.get(id=2)
books = Book.objects.filter(author=this_author)
    
# one-line version:
books = Book.objects.filter(author=Author.objects.get(id=2))


Because the Author class has a books field, we can access the books of a given author
 like so: some_author.books.all()! (You need to say .all because there could potentially be
  many books connected to this author, not just one.) This can be especially convenient 
  on a template (we aren't using templates quite yet, but this is a preview!):

book_project/apps/books/views.py
def index(request):
    context = {"authors": Author.objects.all()}		# we're only sending up all the authors
    return render(request, "index.html", context)
    
book_project/apps/books/templates/index.html
<h1>Author List</h1>
<ul>
  {% for author in authors %}
    <li>{{author.name}}
      <ul>
    	<!-- looping through each author's books! -->
        {% for book in author.books.all %}	
          <li><em>{{book.title}}</em></li>
        {% endfor %}
      </ul>
    </li>
  {% endfor %}
</ul>